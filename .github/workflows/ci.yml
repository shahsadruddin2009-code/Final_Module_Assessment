# GitHub Actions CI/CD Workflow
# This is a blank YAML file for configuring GitHub Actions

name: CI  pipeline for Online Bookstore shopping application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit[toml]
    
    - name: Run Bandit Security Tests
      run: |
        bandit -r . -f json -o bandit-report.json -ll -s B101,B601,B602
        bandit -r . -f txt -o bandit-report.txt -ll -s B101,B601,B602
        echo "Security scan completed. Check bandit-report.txt for details."
      continue-on-error: true
    
    - name: Upload Bandit Security Report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: |
          bandit-report.json
          bandit-report.txt
    
    - name: Run Unit Tests
      run: |
        pytest test_units_final.py --junitxml=test_units_final-results.xml

    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: test_units_final-results.xml

    - name: Run Integration Tests
      run: |
        pytest test_integration_final.py --junitxml=integration-results.xml

    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: integration-results.xml
        
    - name: Run BDD Tests
      run: |
        pytest test_bdd_approach.py --junitxml=test_bdd_approach-results.xml

    - name: Upload BDD Test Results
      uses: actions/upload-artifact@v4
      with:
        name: bdd-test-results
        path: test_bdd_approach-results.xml
      
    - name: Run Performance Tests
      run: |
        pytest test_performance.py --junitxml=test_performance-results.xml --timeout=300
      timeout-minutes: 10
      continue-on-error: true

    - name: Upload Performance Test Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: test_performance-results.xml
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Simulate Deploy to Test Environment
        run: |
          echo "All tests passed. Deploying to test environment..."
          # Simulated deployment command (replace with real one)
          # For example:
          # rsync -av Flask_Bookstore_App/ user@your-test-env:/var/www/bookstore-app/
          echo "Deployment completed."

      